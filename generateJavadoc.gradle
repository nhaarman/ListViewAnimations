buildscript {

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.8.+'
    }

}

/*
 * Copyright 2014 Niek Haarman
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.ajoberstar.grgit.*
def repo = Grgit.open(".")

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        def branch = repo.branch.current.name
        if(project.hasProperty('BRANCH')) {
            branch = BRANCH
        }

        title = POM_NAME + " (" + branch + ")"
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        def folder = (branch == 'master' ? VERSION_NAME : branch) + "/" + project.name
        destinationDir file("./build/docs/javadoc/" + folder)
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        options.links("http://docs.oracle.com/javase/7/docs/api/");
        options.linksOffline("http://d.android.com/reference", System.getenv('ANDROID_HOME') + "docs/reference")
        options.setMemberLevel(JavadocMemberLevel.PACKAGE)
        exclude '**/BuildConfig.java '
        exclude '**/R.java'
    }
}
